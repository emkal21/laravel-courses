openapi: 3.0.3
info:
  title: Laravel Courses
  description: |-
    This project is a simple, single-resource RESTful CRUD API for managing courses.
    All endpoints are public, therefore no authentication is necessary.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
tags:
  - name: courses
    description: Endpoints related to courses
paths:
  /courses:
    get:
      tags:
        - courses
      summary: List all courses
      description: List all courses
      parameters:
        - name: page
          in: query
          required: false
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: items_per_page
          in: query
          required: false
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          $ref: '#/components/responses/CoursesResponse'
        '422':
          $ref: '#/components/responses/ValidationErrorResponse'
    post:
      tags:
        - courses
      summary: Create a new course
      description: Create a new course
      requestBody:
        $ref: '#/components/requestBodies/CourseRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CourseResponse'
        '422':
          $ref: '#/components/responses/ValidationErrorResponse'
  /courses/{id}:
    get:
      tags:
        - courses
      summary: Retrieve a specific course
      description: Retrieve a specific course by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The Course ID to fetch
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/CourseResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
    put:
      tags:
        - courses
      summary: Update a specific course
      description: Update a specific course by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The Course ID to update
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/CourseRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CourseResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/ValidationErrorResponse'
    delete:
      tags:
        - courses
      summary: Delete a specific course
      description: Delete a specific course by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The Course ID to delete
          schema:
            type: integer
      responses:
        '204':
          description: The course was deleted successfully.
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
components:
  schemas:
    Course:
      required:
        - title
        - status
        - is_premium
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Test title
        description:
          type: string
          example: Test description
        status:
          type: string
          example: Published
          enum:
            - Published
            - Pending
        is_premium:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: 2022-12-18T17:16:23+00:00
        deleted_at:
          type: string
          format: date-time
          example: null
    CourseRequest:
      required:
        - title
        - status
        - is_premium
      type: object
      properties:
        title:
          type: string
          example: Test title
        description:
          type: string
          example: Test description
        status:
          type: string
          example: Published
          enum:
            - Published
            - Pending
        is_premium:
          type: boolean
          example: true
  requestBodies:
    CourseRequestBody:
      description: Course request body
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CourseRequest'
  responses:
    CoursesResponse:
      description: List of Course objects
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
    CourseResponse:
      description: Course object
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Course'
    ValidationErrorResponse:
      description: Response with validation errors
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: string
                  example: This is a sample validation error
    EntityNotFoundResponse:
      description: Entity was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: string
                  example: This is a sample error message